#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#define MAX_DIRS 100

#2D array to store directory paths and an integer to keep track of the top of the stack.
char dir_stack[MAX_DIRS][PATH_MAX];
int stack_top = -1;

/*

Func Name : pushd()
What it does:
Gets the current working directory
Checks if the stack is full
Pushes the current directory onto the stack
Changes to the new directory
Prints the new directory
*/

void pushd(const char *dir) {
    char current_dir[PATH_MAX];

    if (getcwd(current_dir, sizeof(current_dir)) == NULL) {
        perror("getcwd");
        return;
    }

    if (stack_top >= MAX_DIRS - 1) {
        fprintf(stderr, "Directory stack full\n");
        return;
    }

    stack_top++;
    strncpy(dir_stack[stack_top], current_dir, PATH_MAX);

    if (chdir(dir) != 0) {
        perror("chdir");
        stack_top--;
        return;
    }

    printf("%s\n", dir);
}

/*
Func Name : popd()
What it does:
Checks if the stack is empty
Changes to the directory at the top of the stack
Prints the directory
Decrements the stack top
*/

void popd() {
    if (stack_top < 0) {
        fprintf(stderr, "Directory stack empty\n");
        return;
    }

    if (chdir(dir_stack[stack_top]) != 0) {
        perror("chdir");
        return;
    }

    printf("%s\n", dir_stack[stack_top]);
    stack_top--;
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s [pushd directory | popd]\n", argv[0]);
        return 1;
    }

    if (strcmp(argv[1], "pushd") == 0) {
        if (argc != 3) {
            fprintf(stderr, "Usage: %s pushd directory\n", argv[0]);
            return 1;
        }
        pushd(argv[2]);
    } else if (strcmp(argv[1], "popd") == 0) {
        if (argc != 2) {
            fprintf(stderr, "Usage: %s popd\n", argv[0]);
            return 1;
        }
        popd();
    } else {
        fprintf(stderr, "Unknown command: %s\n", argv[1]);
        return 1;
    }

    return 0;
}
